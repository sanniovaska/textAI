module SkelGram where

-- Haskell module generated by the BNF converter

import AbsGram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transEntry :: Entry -> Result
transEntry x = case x of
  EQuestion question -> failure x
  EState statement -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Location person locverb place -> failure x
  EitherLoc person place1 place2 -> failure x
  NotLoc person place -> failure x
  Take person takeverb object -> failure x
  Drop person dropverb object -> failure x
  Hand person1 handverb object person2 -> failure x
  Dir place1 edirection place2 -> failure x
transLocVerb :: LocVerb -> Result
transLocVerb x = case x of
  Visin -> failure x
  Vmoved -> failure x
  Vjourneyed -> failure x
  Vwent -> failure x
  Vtravelled -> failure x
transTakeVerb :: TakeVerb -> Result
transTakeVerb x = case x of
  Vtake -> failure x
  Vpick -> failure x
  Vgot -> failure x
transDropVerb :: DropVerb -> Result
transDropVerb x = case x of
  Vdrop -> failure x
  Vdisc -> failure x
transHandVerb :: HandVerb -> Result
transHandVerb x = case x of
  Vhand -> failure x
transQuestion :: Question -> Result
transQuestion x = case x of
  PerLoc person place -> failure x
  ObjLoc object -> failure x
  HowMany person -> failure x
  Before person place -> failure x
  After person place -> failure x
  Path place1 place2 -> failure x
transPerson :: Person -> Result
transPerson x = case x of
  EPerson ident -> failure x
transPlace :: Place -> Result
transPlace x = case x of
  EPlace ident -> failure x
transObject :: Object -> Result
transObject x = case x of
  EObject ident -> failure x
transEDirection :: EDirection -> Result
transEDirection x = case x of
  Dnorth -> failure x
  Deast -> failure x
  Dsouth -> failure x
  Dwest -> failure x

