

module AbsGram where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Entry = EQuestion Question | EState Statement
  deriving (Eq, Ord, Show, Read)

data Statement
    = Location Person LocVerb Place
    | EitherLoc Person Place Place
    | NotLoc Person Place
    | Take Person TakeVerb Object
    | Drop Person DropVerb Object
    | Hand Person HandVerb Object Person
    | Dir Place EDirection Place
  deriving (Eq, Ord, Show, Read)

data LocVerb = Visin | Vmoved | Vjourneyed | Vwent | Vtravelled
  deriving (Eq, Ord, Show, Read)

data TakeVerb = Vtake | Vpick | Vgot
  deriving (Eq, Ord, Show, Read)

data DropVerb = Vdrop | Vdisc
  deriving (Eq, Ord, Show, Read)

data HandVerb = Vhand
  deriving (Eq, Ord, Show, Read)

data Question
    = PerLoc Person Place
    | ObjLoc Object
    | HowMany Person
    | Before Person Place
    | After Person Place
    | Path Place Place
  deriving (Eq, Ord, Show, Read)

data Person = EPerson Ident
  deriving (Eq, Ord, Show, Read)

data Place = EPlace Ident
  deriving (Eq, Ord, Show, Read)

data Object = EObject Ident
  deriving (Eq, Ord, Show, Read)

data EDirection = Dnorth | Deast | Dsouth | Dwest
  deriving (Eq, Ord, Show, Read)

