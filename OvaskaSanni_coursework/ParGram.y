-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGram where
import AbsGram
import LexGram
import ErrM

}

%name pEntry Entry
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '
' { PT _ (TS _ 1) }
  '?' { PT _ (TS _ 2) }
  'How do you go from the' { PT _ (TS _ 3) }
  'How many objects is' { PT _ (TS _ 4) }
  'Is' { PT _ (TS _ 5) }
  'The' { PT _ (TS _ 6) }
  'Where is the' { PT _ (TS _ 7) }
  'Where was' { PT _ (TS _ 8) }
  'after the' { PT _ (TS _ 9) }
  'before the' { PT _ (TS _ 10) }
  'carrying' { PT _ (TS _ 11) }
  'discarded' { PT _ (TS _ 12) }
  'dropped' { PT _ (TS _ 13) }
  'east' { PT _ (TS _ 14) }
  'got' { PT _ (TS _ 15) }
  'handed' { PT _ (TS _ 16) }
  'in the' { PT _ (TS _ 17) }
  'is' { PT _ (TS _ 18) }
  'is either in the' { PT _ (TS _ 19) }
  'is in' { PT _ (TS _ 20) }
  'is no longer in the' { PT _ (TS _ 21) }
  'journeyed to' { PT _ (TS _ 22) }
  'moved to' { PT _ (TS _ 23) }
  'north' { PT _ (TS _ 24) }
  'of the' { PT _ (TS _ 25) }
  'or the' { PT _ (TS _ 26) }
  'picked up' { PT _ (TS _ 27) }
  'south' { PT _ (TS _ 28) }
  'the' { PT _ (TS _ 29) }
  'to' { PT _ (TS _ 30) }
  'to the' { PT _ (TS _ 31) }
  'took' { PT _ (TS _ 32) }
  'travelled to' { PT _ (TS _ 33) }
  'went to' { PT _ (TS _ 34) }
  'west' { PT _ (TS _ 35) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

ListEntry :: { [Entry] }
ListEntry : {- empty -} { [] }
          | ListEntry Entry '
' { flip (:) $1 $2 }
Entry :: { Entry }
Entry : Question '?' { AbsGram.EQuestion $1 }
      | Statement { AbsGram.EState $1 }
Statement :: { Statement }
Statement : Person LocVerb 'the' Place { AbsGram.Location $1 $2 $4 }
          | Person 'is either in the' Place 'or the' Place { AbsGram.EitherLoc $1 $3 $5 }
          | Person 'is no longer in the' Place { AbsGram.NotLoc $1 $3 }
          | Person TakeVerb 'the' Object { AbsGram.Take $1 $2 $4 }
          | Person DropVerb 'the' Object { AbsGram.Drop $1 $2 $4 }
          | Person HandVerb 'the' Object 'to' Person { AbsGram.Hand $1 $2 $4 $6 }
          | 'The' Place 'is' EDirection 'of the' Place { AbsGram.Dir $2 $4 $6 }
LocVerb :: { LocVerb }
LocVerb : 'is in' { AbsGram.Visin }
        | 'moved to' { AbsGram.Vmoved }
        | 'journeyed to' { AbsGram.Vjourneyed }
        | 'went to' { AbsGram.Vwent }
        | 'travelled to' { AbsGram.Vtravelled }
TakeVerb :: { TakeVerb }
TakeVerb : 'took' { AbsGram.Vtake }
         | 'picked up' { AbsGram.Vpick }
         | 'got' { AbsGram.Vgot }
DropVerb :: { DropVerb }
DropVerb : 'dropped' { AbsGram.Vdrop }
         | 'discarded' { AbsGram.Vdisc }
HandVerb :: { HandVerb }
HandVerb : 'handed' { AbsGram.Vhand }
Question :: { Question }
Question : 'Is' Person 'in the' Place { AbsGram.PerLoc $2 $4 }
         | 'Where is the' Object { AbsGram.ObjLoc $2 }
         | 'How many objects is' Person 'carrying' { AbsGram.HowMany $2 }
         | 'Where was' Person 'before the' Place { AbsGram.Before $2 $4 }
         | 'Where was' Person 'after the' Place { AbsGram.After $2 $4 }
         | 'How do you go from the' Place 'to the' Place { AbsGram.Path $2 $4 }
Person :: { Person }
Person : Ident { AbsGram.EPerson $1 }
Place :: { Place }
Place : Ident { AbsGram.EPlace $1 }
Object :: { Object }
Object : Ident { AbsGram.EObject $1 }
EDirection :: { EDirection }
EDirection : 'north' { AbsGram.Dnorth }
           | 'east' { AbsGram.Deast }
           | 'south' { AbsGram.Dsouth }
           | 'west' { AbsGram.Dwest }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

